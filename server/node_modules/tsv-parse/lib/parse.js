"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TSVParserOptions_1 = require("./TSVParserOptions");
const TAB = "\t";
const NEWLINE_REGEX = /\r?\n/;
const parse = (tsvString, options) => {
    const optionsToUse = { ...TSVParserOptions_1.TSV_PARSER_DEFAULT_OPTIONS, ...options };
    const lines = tsvToLines(tsvString);
    if (optionsToUse.headerRow) {
        const headerRow = lines.shift();
        const fieldNames = headerRow?.split(TAB).filter(Boolean);
        return {
            fieldNames,
            lines: lines
                .map((line) => parseLine(line, fieldNames, optionsToUse))
                .filter(Boolean),
        };
    }
    throw new Error("Feature not implemented yet (yes, I know its the default)");
};
const tsvToLines = (tsvString) => {
    return tsvString.split(NEWLINE_REGEX);
};
const parseLine = (tsvLine, fieldNames, options) => {
    try {
        if (fieldNames) {
            return parseLineWithHeader(tsvLine, fieldNames, options);
        }
        return null;
    }
    catch (error) {
        return { error: true, errorMessage: error?.message };
    }
};
const parseLineWithHeader = (tsvLine, fieldNames, options) => {
    const numberOfValues = fieldNames.length;
    const lineValues = tsvLine.split(TAB);
    if (options?.ignoreBlankRows &&
        lineValues.every((lineValue) => !lineValue || lineValue === "")) {
        return null;
    }
    if (options?.ignoreBlankHeaderlessData) {
        while (lineValues.length > numberOfValues) {
            const lastValue = lineValues.pop();
            if (lastValue && lastValue !== "") {
                return {
                    error: true,
                    errorMessage: `Line has ${lineValues.length + 1} values, but header indicates ${numberOfValues} values.`,
                };
            }
        }
    }
    if (lineValues.length !== numberOfValues) {
        return {
            error: true,
            errorMessage: `Line has ${lineValues.length} values, but header indicates ${numberOfValues} values.`,
        };
    }
    return {
        error: false,
        parsedLine: mapValuesToFieldNames(lineValues, fieldNames),
    };
};
const mapValuesToFieldNames = (lineValues, fieldNames) => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const result = {};
    for (let index = 0; index < lineValues.length; index++) {
        result[fieldNames[index]] = lineValues[index];
    }
    return result;
};
exports.default = parse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcGFyc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSx5REFFNEI7QUFHNUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQztBQUU5QixNQUFNLEtBQUssR0FBRyxDQUNWLFNBQWlCLEVBQ2pCLE9BQW1DLEVBQzFCLEVBQUU7SUFDWCxNQUFNLFlBQVksR0FBRyxFQUFFLEdBQUcsNkNBQTBCLEVBQUUsR0FBRyxPQUFPLEVBQUUsQ0FBQztJQUVuRSxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEMsSUFBSSxZQUFZLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDekIsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2hDLE1BQU0sVUFBVSxHQUFHLFNBQVMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pELE9BQU87WUFDSCxVQUFVO1lBQ1YsS0FBSyxFQUFFLEtBQUs7aUJBQ1AsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQztpQkFDeEQsTUFBTSxDQUFDLE9BQU8sQ0FBb0I7U0FDMUMsQ0FBQztJQUNOLENBQUM7SUFDRCxNQUFNLElBQUksS0FBSyxDQUNYLDJEQUEyRCxDQUM5RCxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBRUYsTUFBTSxVQUFVLEdBQUcsQ0FBQyxTQUFpQixFQUFZLEVBQUU7SUFDL0MsT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzFDLENBQUMsQ0FBQztBQUVGLE1BQU0sU0FBUyxHQUFHLENBQ2QsT0FBZSxFQUNmLFVBQXFCLEVBQ3JCLE9BQTBCLEVBQ04sRUFBRTtJQUN0QixJQUFJLENBQUM7UUFDRCxJQUFJLFVBQVUsRUFBRSxDQUFDO1lBQ2IsT0FBTyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzdELENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNiLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRyxLQUFlLEVBQUUsT0FBTyxFQUFFLENBQUM7SUFDcEUsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGLE1BQU0sbUJBQW1CLEdBQUcsQ0FDeEIsT0FBZSxFQUNmLFVBQW9CLEVBQ3BCLE9BQTBCLEVBQ04sRUFBRTtJQUN0QixNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO0lBQ3pDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFdEMsSUFDSSxPQUFPLEVBQUUsZUFBZTtRQUN4QixVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsSUFBSSxTQUFTLEtBQUssRUFBRSxDQUFDLEVBQ2pFLENBQUM7UUFDQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsSUFBSSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsQ0FBQztRQUNyQyxPQUFPLFVBQVUsQ0FBQyxNQUFNLEdBQUcsY0FBYyxFQUFFLENBQUM7WUFDeEMsTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ25DLElBQUksU0FBUyxJQUFJLFNBQVMsS0FBSyxFQUFFLEVBQUUsQ0FBQztnQkFDaEMsT0FBTztvQkFDSCxLQUFLLEVBQUUsSUFBSTtvQkFDWCxZQUFZLEVBQUUsWUFDVixVQUFVLENBQUMsTUFBTSxHQUFHLENBQ3hCLGlDQUFpQyxjQUFjLFVBQVU7aUJBQzVELENBQUM7WUFDTixDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUM7SUFFRCxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssY0FBYyxFQUFFLENBQUM7UUFDdkMsT0FBTztZQUNILEtBQUssRUFBRSxJQUFJO1lBQ1gsWUFBWSxFQUFFLFlBQVksVUFBVSxDQUFDLE1BQU0saUNBQWlDLGNBQWMsVUFBVTtTQUN2RyxDQUFDO0lBQ04sQ0FBQztJQUVELE9BQU87UUFDSCxLQUFLLEVBQUUsS0FBSztRQUNaLFVBQVUsRUFBRSxxQkFBcUIsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDO0tBQzVELENBQUM7QUFDTixDQUFDLENBQUM7QUFFRixNQUFNLHFCQUFxQixHQUFHLENBQzFCLFVBQW9CLEVBQ3BCLFVBQW9CLEVBQ0UsRUFBRTtJQUN4Qiw4REFBOEQ7SUFDOUQsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDO0lBQ3ZCLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUM7UUFDckQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQyxDQUFDO0FBRUYsa0JBQWUsS0FBSyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRTVkxpbmVSZXN1bHQgZnJvbSBcIi4vVFNWTGluZVJlc3VsdFwiO1xuaW1wb3J0IFRTVlBhcnNlck9wdGlvbnMsIHtcbiAgICBUU1ZfUEFSU0VSX0RFRkFVTFRfT1BUSU9OUyxcbn0gZnJvbSBcIi4vVFNWUGFyc2VyT3B0aW9uc1wiO1xuaW1wb3J0IFRTVlJlc3VsdCBmcm9tIFwiLi9UU1ZSZXN1bHRcIjtcblxuY29uc3QgVEFCID0gXCJcXHRcIjtcbmNvbnN0IE5FV0xJTkVfUkVHRVggPSAvXFxyP1xcbi87XG5cbmNvbnN0IHBhcnNlID0gKFxuICAgIHRzdlN0cmluZzogc3RyaW5nLFxuICAgIG9wdGlvbnM/OiBQYXJ0aWFsPFRTVlBhcnNlck9wdGlvbnM+LFxuKTogVFNWUmVzdWx0ID0+IHtcbiAgICBjb25zdCBvcHRpb25zVG9Vc2UgPSB7IC4uLlRTVl9QQVJTRVJfREVGQVVMVF9PUFRJT05TLCAuLi5vcHRpb25zIH07XG5cbiAgICBjb25zdCBsaW5lcyA9IHRzdlRvTGluZXModHN2U3RyaW5nKTtcbiAgICBpZiAob3B0aW9uc1RvVXNlLmhlYWRlclJvdykge1xuICAgICAgICBjb25zdCBoZWFkZXJSb3cgPSBsaW5lcy5zaGlmdCgpO1xuICAgICAgICBjb25zdCBmaWVsZE5hbWVzID0gaGVhZGVyUm93Py5zcGxpdChUQUIpLmZpbHRlcihCb29sZWFuKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpZWxkTmFtZXMsXG4gICAgICAgICAgICBsaW5lczogbGluZXNcbiAgICAgICAgICAgICAgICAubWFwKChsaW5lKSA9PiBwYXJzZUxpbmUobGluZSwgZmllbGROYW1lcywgb3B0aW9uc1RvVXNlKSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pIGFzIFRTVkxpbmVSZXN1bHRbXSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkZlYXR1cmUgbm90IGltcGxlbWVudGVkIHlldCAoeWVzLCBJIGtub3cgaXRzIHRoZSBkZWZhdWx0KVwiLFxuICAgICk7XG59O1xuXG5jb25zdCB0c3ZUb0xpbmVzID0gKHRzdlN0cmluZzogc3RyaW5nKTogc3RyaW5nW10gPT4ge1xuICAgIHJldHVybiB0c3ZTdHJpbmcuc3BsaXQoTkVXTElORV9SRUdFWCk7XG59O1xuXG5jb25zdCBwYXJzZUxpbmUgPSAoXG4gICAgdHN2TGluZTogc3RyaW5nLFxuICAgIGZpZWxkTmFtZXM/OiBzdHJpbmdbXSxcbiAgICBvcHRpb25zPzogVFNWUGFyc2VyT3B0aW9ucyxcbik6IFRTVkxpbmVSZXN1bHQgfCBudWxsID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoZmllbGROYW1lcykge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlTGluZVdpdGhIZWFkZXIodHN2TGluZSwgZmllbGROYW1lcywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IHRydWUsIGVycm9yTWVzc2FnZTogKGVycm9yIGFzIEVycm9yKT8ubWVzc2FnZSB9O1xuICAgIH1cbn07XG5cbmNvbnN0IHBhcnNlTGluZVdpdGhIZWFkZXIgPSAoXG4gICAgdHN2TGluZTogc3RyaW5nLFxuICAgIGZpZWxkTmFtZXM6IHN0cmluZ1tdLFxuICAgIG9wdGlvbnM/OiBUU1ZQYXJzZXJPcHRpb25zLFxuKTogVFNWTGluZVJlc3VsdCB8IG51bGwgPT4ge1xuICAgIGNvbnN0IG51bWJlck9mVmFsdWVzID0gZmllbGROYW1lcy5sZW5ndGg7XG4gICAgY29uc3QgbGluZVZhbHVlcyA9IHRzdkxpbmUuc3BsaXQoVEFCKTtcblxuICAgIGlmIChcbiAgICAgICAgb3B0aW9ucz8uaWdub3JlQmxhbmtSb3dzICYmXG4gICAgICAgIGxpbmVWYWx1ZXMuZXZlcnkoKGxpbmVWYWx1ZSkgPT4gIWxpbmVWYWx1ZSB8fCBsaW5lVmFsdWUgPT09IFwiXCIpXG4gICAgKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zPy5pZ25vcmVCbGFua0hlYWRlcmxlc3NEYXRhKSB7XG4gICAgICAgIHdoaWxlIChsaW5lVmFsdWVzLmxlbmd0aCA+IG51bWJlck9mVmFsdWVzKSB7XG4gICAgICAgICAgICBjb25zdCBsYXN0VmFsdWUgPSBsaW5lVmFsdWVzLnBvcCgpO1xuICAgICAgICAgICAgaWYgKGxhc3RWYWx1ZSAmJiBsYXN0VmFsdWUgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBgTGluZSBoYXMgJHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVWYWx1ZXMubGVuZ3RoICsgMVxuICAgICAgICAgICAgICAgICAgICB9IHZhbHVlcywgYnV0IGhlYWRlciBpbmRpY2F0ZXMgJHtudW1iZXJPZlZhbHVlc30gdmFsdWVzLmAsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChsaW5lVmFsdWVzLmxlbmd0aCAhPT0gbnVtYmVyT2ZWYWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVycm9yOiB0cnVlLFxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBgTGluZSBoYXMgJHtsaW5lVmFsdWVzLmxlbmd0aH0gdmFsdWVzLCBidXQgaGVhZGVyIGluZGljYXRlcyAke251bWJlck9mVmFsdWVzfSB2YWx1ZXMuYCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcjogZmFsc2UsXG4gICAgICAgIHBhcnNlZExpbmU6IG1hcFZhbHVlc1RvRmllbGROYW1lcyhsaW5lVmFsdWVzLCBmaWVsZE5hbWVzKSxcbiAgICB9O1xufTtcblxuY29uc3QgbWFwVmFsdWVzVG9GaWVsZE5hbWVzID0gKFxuICAgIGxpbmVWYWx1ZXM6IHN0cmluZ1tdLFxuICAgIGZpZWxkTmFtZXM6IHN0cmluZ1tdLFxuKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCByZXN1bHQ6IGFueSA9IHt9O1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsaW5lVmFsdWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICByZXN1bHRbZmllbGROYW1lc1tpbmRleF1dID0gbGluZVZhbHVlc1tpbmRleF07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwYXJzZTtcbiJdfQ==